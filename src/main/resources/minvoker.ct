///invoker_name
${module_name}$MInvoker
///
public class ${invoker_name} implements dev.xframe.game.module.beans.ModularInvoker {
    
    ///logger_field
    static final org.slf4j.Logger _logger = org.slf4j.LoggerFactory.getLogger("${module_name}");
    ///
    
    ///param_getter
    (${param_name})mc.getBean(${param_index})
    ///
    
    ///method_call
	_local_name.${method_name}(${method_params});
	///

    ///load_method
	public void invokeLoad(dev.xframe.game.module.beans.ModuleContainer mc, Object module) {
		try {
            if(!mc.isModuleLoaded(${module_index})) {
                ${module_name} _local_name = (${module_name}) module;
                ${methods_call}
                /*
                ${method_call};
                */
            }
		} catch (Throwable throwable) {
            _logger.warn("load [${module_name}] error");
            dev.xframe.utils.XCaught.throwException(throwable);
        }
	}
	///
	
	///unload_method
	public void invokeUnload(dev.xframe.game.module.beans.ModuleContainer mc, Object module) {
		try {
			if(mc.isModuleLoaded(${module_index})) {
				${module_name} _local_name = (${module_name}) module;
	            ${methods_call}
	            /*
	            ${method_call};
	            */
			}
        } catch (Throwable throwable) {
            _logger.warn("unload [${module_name}] error:", throwable);
        }
	}
	///
	
	///save_method
	public void invokeSave(dev.xframe.game.module.beans.ModuleContainer mc, Object module) {
		try {
			if(mc.isModuleLoaded(${module_index})) {
				${module_name} _local_name = (${module_name}) module;
	            ${methods_call}
	            /*
	            ${method_call};
	            */
			}
        } catch (Throwable throwable) {
            _logger.warn("save [${module_name}] error:", throwable);
        }
	}
	///
	
	///tick_method
    public void invokeTick(dev.xframe.game.module.beans.ModuleContainer mc, Object module) {
        try {
            if(mc.isModuleLoaded(${module_index})) {
                ${module_name} _local_name = (${module_name}) module;
                ${methods_call}
                /*
                ${method_call};
                */
            }
        } catch (Throwable throwable) {
            _logger.warn("tick [${module_name}] error:", throwable);
        }
    }
    ///

}
